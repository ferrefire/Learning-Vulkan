#version 450

#extension GL_ARB_shading_language_include : require

layout(set = 1, binding = 0, rgba16) uniform image3D aerialTexture;
layout (set = 1, binding = 1) uniform sampler2D transmittanceSampler;
layout (set = 1, binding = 2) uniform sampler2D scatterSampler;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

#ifndef AERIAL_COMPUTE
#define AERIAL_COMPUTE
#endif

const vec3 resolution = vec3(32.0, 32.0, 32.0);
const vec3 resolutionMult = 1.0 / resolution;

const vec2 scatterResolution = vec2(32, 32);

#include "variables.glsl"
#include "transformation.glsl"
#include "depth.glsl"
#include "lighting.glsl"
#include "atmosphere.glsl"

void main()
{
	//vec3 uv = vec3(gl_GlobalInvocationID.xyz) / resolution;
	//imageStore(aerialTexture, ivec3(gl_GlobalInvocationID.xyz), vec4(uv, 1.0));
	//return;

	vec3 sunDirection = variables.rotatedLightDirection;
	vec2 pixelPosition = vec2(gl_GlobalInvocationID.xy + vec2(0.5)) / resolution.xy;
	vec3 clipSpace = vec3(pixelPosition * vec2(2.0) - vec2(1.0), 0.0);
	vec4 hPos = inverse(variables.viewMatrix) * vec4(clipSpace, 1.0);

	vec3 rayDirection = normalize(hPos.xyz / hPos.w - variables.viewPosition);
	rayDirection = normalize(Rotate(rayDirection, radians(-90.0), vec3(1.0, 0.0, 0.0)));
	//vec3 rayStart = vec3(0.0, 0.0, PR + (variables.viewPosition.y - variables.terrainOffset.y) * 0.0001);
	vec3 rayStart = vec3(0.0, 0.0, PR + RADIUS_OFFSET + (variables.viewPosition.y + variables.terrainOffset.y) * 0.001);

	float slice = (float(gl_GlobalInvocationID.z) + 0.5) / resolution.z;
	slice *= slice;
	slice *= resolution.z;

	float tMax = slice * 4.0;
	vec3 newRayStart = rayStart + tMax * rayDirection;

	float viewHeight = length(newRayStart);

	if (viewHeight <= PR + RADIUS_OFFSET)
	{
		newRayStart = normalize(newRayStart) * (PR + RADIUS_OFFSET + 0.001);
		rayDirection = normalize(newRayStart - rayStart);
		//rayDirection = normalize(Rotate(rayDirection, radians(-90.0), vec3(1.0, 0.0, 0.0)));
		tMax = length(newRayStart - rayStart);
	}

	viewHeight = length(rayStart);
	if (viewHeight >= AR)
	{
		vec3 prevRayStart = rayStart;
		if (!MoveToAtmosphereEdge(rayStart, rayDirection))
		{
			imageStore(aerialTexture, ivec3(gl_GlobalInvocationID.xyz), vec4(0.0, 0.0, 0.0, 1.0));
			return;
		}

		float atmosphereLength = length(prevRayStart - rayStart);
		if (tMax < atmosphereLength)
		{
			imageStore(aerialTexture, ivec3(gl_GlobalInvocationID.xyz), vec4(0.0, 0.0, 0.0, 1.0));
			return;
		}
		tMax = max(0.0, tMax - atmosphereLength);
	}

	int sampleCount = int(max(1.0, float(gl_GlobalInvocationID.z + 1.0) * 2.0));
	RaymarchResult result = AerialScatter(rayStart, rayDirection, sunDirection, sampleCount, tMax);
	float averageTransmittance = (result.multiScattering.x + result.multiScattering.y + result.multiScattering.z) / 3.0;

	imageStore(aerialTexture, ivec3(gl_GlobalInvocationID.xyz), vec4(result.luminance, averageTransmittance));
}