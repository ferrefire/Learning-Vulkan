#version 450

#extension GL_ARB_shading_language_include : require

struct CountData
{
	uint lod0RenderCount;
	uint lod1RenderCount;
	uint lod2RenderCount;
	uint lod3RenderCount;
	uint lod4RenderCount;
	uint lod5RenderCount;

	uint lod0ShadowCount;
	uint lod1ShadowCount;
	uint lod2ShadowCount;
	uint lod3ShadowCount;
	uint lod4ShadowCount;
	uint lod5ShadowCount;
};

struct TreeData
{
	uint posxz;
	uint posyroty;
	uint scaxcoly;
	uint life;
};

struct TreeRenderData
{
	uint posxz;
	uint posyroty;
	uint scaxcoly;
};

struct LeafData
{
	uint posxz;
	uint posyroty;
	uint scalxrotx;
	uint colxnormx;
	uint normyz;
	uint sturxlody;
};

struct TreeComputeResult
{
	vec4 position;
	vec4 viewPosition;
	int render;
	float rotation;
	float scale;
	float color;
	uint dataIndex;
};

struct LodComputeResult
{
	float lodInter;
	float lodDis;
	int lod;
	int shadowLod;
};

struct IndexComputeResult
{
	uint index;
	uint offset;
	uint shadowIndex;
	uint shadowOffset;
};

layout(std430, set = 1, binding = 0) readonly restrict buffer DataBuffer
{
	TreeData data[];
};

layout(std430, set = 1, binding = 1) buffer RenderBuffer
{
	TreeRenderData renderData[];
};

layout(std430, set = 1, binding = 2) buffer ShadowBuffer
{
	TreeRenderData shadowData[];
};

layout(std430, set = 1, binding = 3) buffer CountBuffer
{
	CountData countData;
};

layout(set = 1, binding = 4) uniform TreeVariables
{
	uint treeBase;
	uint treeCount;
	uint treeLod0RenderBase;
	uint treeLod0RenderCount;
	uint treeLod1RenderBase;
	uint treeLod1RenderCount;
	uint treeLod2RenderBase;
	uint treeLod2RenderCount;
	uint treeLod3RenderBase;
	uint treeLod3RenderCount;
	uint treeLod4RenderBase;
	uint treeLod4RenderCount;
	uint treeLod5RenderBase;
	uint treeLod5RenderCount;
	uint treeTotalRenderBase;
	uint treeTotalRenderCount;
	float spacing;
	float spacingMult;
	vec4 leafCounts[6];
} treeVariables;

layout(std430, set = 1, binding = 5) buffer LeavesRenderBuffer
{
	LeafData leavesRenderData[];
};

layout(std430, set = 1, binding = 6) buffer LeavesShadowBuffer
{
	LeafData leavesShadowData[];
};

layout(std430, set = 1, binding = 7) readonly restrict buffer LeafPositionsBuffer
{
	vec4 leafPositions[];
};

layout(push_constant, std430) uniform PushConstants
{
    uint capturing;
} pc;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 3) in;

#include "variables.glsl"
#include "functions.glsl"
#include "heightmap.glsl"
#include "culling.glsl"
#include "transformation.glsl"

const int frustumCheckDis = 35 * 35;
//const vec3 treeCenter = vec3(-3.05, 47.22, -5.725);
const vec3 treeCenter = vec3(0.0, 40.0, 0.0);

const float leafBlendDistance = 0.5;
const float leafBlendStart = 1.0 - leafBlendDistance;
const float leafBlendMult = 1.0 / leafBlendDistance;

const float leafFadeDistance = 0.25;
const float leafFadeStart = 1.0 - leafFadeDistance;
const float leafFadeMult = 1.0 / leafFadeDistance;

shared int sharedRender[64];
shared TreeComputeResult sharedTreeResults[64];
shared LodComputeResult sharedLodResults[64];
shared IndexComputeResult sharedIndexResults[64];

int Inside(vec2 pos)
{
	float dis = SquaredDistanceVec2(pos, vec2(0));

	if (dis >= pow(treeVariables.treeTotalRenderBase * 0.5, 2)) return (-1);
	else if (dis >= pow(treeVariables.treeLod2RenderBase * 0.5, 2)) return (3);
	else if (dis >= pow(treeVariables.treeLod1RenderBase * 0.5, 2)) return (2);
	else if (dis >= pow(treeVariables.treeLod0RenderBase * 0.5, 2)) return (1);
	else return (0);
}

int InsideWorld(vec3 pos)
{
	float dis = SquaredDistance(pos, variables.viewPosition);

	if (dis >= pow(treeVariables.treeTotalRenderBase * treeVariables.spacing * 0.5, 2)) return (-1);
	else if (dis >= pow(treeVariables.treeLod2RenderBase * treeVariables.spacing * 0.5, 2)) return (3);
	else if (dis >= pow(treeVariables.treeLod1RenderBase * treeVariables.spacing * 0.5, 2)) return (2);
	else if (dis >= pow(treeVariables.treeLod0RenderBase * treeVariables.spacing * 0.5, 2)) return (1);
	else return (0);
}

float InsideWorldInter(float dis)
{
	//float dis = SquaredDistance(pos, variables.viewPosition);
	float dis5 = pow(treeVariables.treeTotalRenderBase * treeVariables.spacing * 0.5, 2);
	float dis4 = pow(treeVariables.treeLod4RenderBase * treeVariables.spacing * 0.5, 2);
	float dis3 = pow(treeVariables.treeLod3RenderBase * treeVariables.spacing * 0.5, 2);
	float dis2 = pow(treeVariables.treeLod2RenderBase * treeVariables.spacing * 0.5, 2);
	float dis1 = pow(treeVariables.treeLod1RenderBase * treeVariables.spacing * 0.5, 2);
	float dis0 = pow(treeVariables.treeLod0RenderBase * treeVariables.spacing * 0.5, 2);

	if (dis >= dis5)
	{
		return (-1);
	}
	else if (dis >= dis4)
	{
		return (5.0 + ((dis - dis4) / (dis5 - dis4)));
	}
	else if (dis >= dis3)
	{
		return (4.0 + ((dis - dis3) / (dis4 - dis3)));
	}
	else if (dis >= dis2)
	{
		return (3.0 + ((dis - dis2) / (dis3 - dis2)));
	}
	else if (dis >= dis1)
	{
		return (2.0 + ((dis - dis1) / (dis2 - dis1)));
	}
	else if (dis >= dis0)
	{
		return (1.0 + ((dis - dis0) / (dis1 - dis0)));
	}
	else
	{
		return (dis / dis0);
	}
}

TreeComputeResult ComputeTreeData()
{
	TreeComputeResult treeResult;
	treeResult.render = 0;
	treeResult.position = vec4(0.0);
	treeResult.rotation = 0.0;
	treeResult.scale = 1.0;
	treeResult.color = 1.0;
	treeResult.dataIndex = 0;
	treeResult.viewPosition = vec4(0.0);

	vec3 viewPosition = variables.viewPosition;
	vec2 flooredViewPosition = floor(viewPosition.xz * treeVariables.spacingMult);
	ivec2 ixz = ivec2(gl_GlobalInvocationID.xy) - ivec2(treeVariables.treeTotalRenderBase * 0.5);
	ixz += ivec2(flooredViewPosition);
	vec2 worldOffset = ixz;
	ixz += ivec2(floor(variables.terrainOffset.xz * treeVariables.spacingMult));
	vec2 dataIndexVec = vec2(treeVariables.treeBase * 0.5) + ixz;

	if (dataIndexVec.x < 0 || dataIndexVec.x > treeVariables.treeBase || dataIndexVec.y < 0 || dataIndexVec.y > treeVariables.treeBase) return (treeResult);
	uint dataIndex = uint(floor(dataIndexVec.x * treeVariables.treeBase + dataIndexVec.y));
	if (data[dataIndex].life == 0) return (treeResult);

	vec3 offset = vec3(0);
	offset.xz = unpackHalf2x16(data[dataIndex].posxz);
	vec2 posyroty = unpackHalf2x16(data[dataIndex].posyroty);
	offset.y = posyroty.x;
	float rotation = posyroty.y;
	vec2 xx = unpackHalf2x16(data[dataIndex].scaxcoly);
	float scale = xx.x;
	float color = xx.y;

	float x = worldOffset.x * treeVariables.spacing + offset.x;
	float z = worldOffset.y * treeVariables.spacing + offset.z;
	float y = GetTerrainHeight(vec2(x, z)) - 1.0;
	if (y + variables.terrainOffset.y < variables.waterHeight.x + variables.waterHeight.y) return (treeResult);
	vec3 worldPosition = vec3(x, y, z);

	treeResult.position = vec4(worldPosition, 0.0);
	treeResult.rotation = rotation;
	treeResult.scale = scale;
	treeResult.color = color;
	treeResult.dataIndex = dataIndex;
	treeResult.render = 1;
	treeResult.viewPosition = vec4(viewPosition, 0.0);

	return (treeResult);
}

LodComputeResult ComputeLod(inout TreeComputeResult treeResult)
{
	LodComputeResult lodResult;
	lodResult.lodInter = -1.0;
	lodResult.lodDis = 0.0;
	lodResult.lod = -1;
	lodResult.shadowLod = -1;

	//vec3 viewPosition = variables.viewPosition;
	float viewDistance = SquaredDistance(treeResult.position.xyz + vec3(0, 30, 0), treeResult.viewPosition.xyz);
	float lodInter = InsideWorldInter(viewDistance);
	if (lodInter == -1) return (lodResult);
	int lod = int(floor(lodInter));
	int shadowLod = lod;
	if (lod == -1) return (lodResult);
	float lodDis = lodInter - lod;

	if (lod == 5 && lodDis > 0.5)
	{
		float fadeDiff = ((lodDis - 0.5) * 2.0) - Random01(float(treeResult.dataIndex));
		if (fadeDiff > 0.0) return (lodResult);
		if (abs(fadeDiff) < 0.2) treeResult.scale *= clamp(abs(fadeDiff) * 5.0, 0.1, 1.0);
	}

	if (lod > 3)
	{
		if (InView(treeResult.position.xyz, 0) == 0) return (lodResult);
	}
	else if (lod > 2)
	{
		if (InView(treeResult.position.xyz + vec3(0, 30, 0), 0) == 0) return (lodResult);
	}
	else if (lod == 2)
	{
		//if (InView(treeResult.position.xyz + vec3(0, 60, 0), 0) == 0)
		if (AreaInView2(treeResult.position.xyz + vec3(0, 30, 0), 30.0) == 0)
		{
			lod = -1;
			shadowLod = 4;
		}
	}
	else if (lod == 1)
	{
		//if (AreaInView2(treeResult.position.xyz + vec3(0, 60, 0), 60.0) == 0) return (lodResult);
		if (AreaInView2(treeResult.position.xyz + vec3(0, 30, 0), 30.0) == 0)
		{
			lod = -1;
			shadowLod = 3;
		}
	}
	else if (lod == 0)
	{
		if (AreaInView2(treeResult.position.xyz + vec3(0, 40, 0), 40.0) == 0) lod = -1;
	}
	if (Occluded(WorldToCull(treeResult.position.xyz + vec3(0, 60, 0)), 0.005) == 1) return (lodResult);

	lodResult.lodInter = lodInter;
	lodResult.lodDis = lodDis;
	lodResult.lod = lod;
	lodResult.shadowLod = shadowLod;

	return (lodResult);
}

IndexComputeResult ComputeIndex(in LodComputeResult lodResult)
{
	IndexComputeResult indexResult;
	indexResult.index = 0;
	indexResult.offset = 0;
	indexResult.shadowIndex = 0;
	indexResult.shadowOffset = 0;

	uint index = 0;
	uint indexOffset = 0;

	if (lodResult.lod == 0)
	{
		index = atomicAdd(countData.lod0RenderCount, 1);
	}
	else if (lodResult.lod == 1)
	{
		index = atomicAdd(countData.lod1RenderCount, 1);
		indexOffset = treeVariables.treeLod0RenderCount;
	}
	else if (lodResult.lod == 2)
	{
		index = atomicAdd(countData.lod2RenderCount, 1);
		indexOffset = treeVariables.treeLod0RenderCount + treeVariables.treeLod1RenderCount;
	}
	else if (lodResult.lod == 3)
	{
		index = atomicAdd(countData.lod3RenderCount, 1);
		indexOffset = treeVariables.treeLod0RenderCount + treeVariables.treeLod1RenderCount + treeVariables.treeLod2RenderCount;
	}
	else if (lodResult.lod == 4)
	{
		index = atomicAdd(countData.lod4RenderCount, 1);
		indexOffset = treeVariables.treeLod0RenderCount + treeVariables.treeLod1RenderCount + treeVariables.treeLod2RenderCount + treeVariables.treeLod3RenderCount;
	}
	else if (lodResult.lod == 5)
	{
		index = atomicAdd(countData.lod5RenderCount, 1);
		indexOffset = treeVariables.treeLod0RenderCount + treeVariables.treeLod1RenderCount + treeVariables.treeLod2RenderCount + treeVariables.treeLod3RenderCount + treeVariables.treeLod4RenderCount;
	}

	uint shadowIndex = 0;
	uint shadowIndexOffset = 0;

	if (lodResult.shadowLod == 0)
	{
		shadowIndex = atomicAdd(countData.lod0ShadowCount, 1);
	}
	else if (lodResult.shadowLod == 1)
	{
		shadowIndex = atomicAdd(countData.lod1ShadowCount, 1);
		shadowIndexOffset = treeVariables.treeLod0RenderCount;
	}
	else if (lodResult.shadowLod == 2)
	{
		shadowIndex = atomicAdd(countData.lod2ShadowCount, 1);
		shadowIndexOffset = treeVariables.treeLod0RenderCount + treeVariables.treeLod1RenderCount;
	}
	else if (lodResult.shadowLod == 3)
	{
		shadowIndex = atomicAdd(countData.lod3ShadowCount, 1);
		shadowIndexOffset = treeVariables.treeLod0RenderCount + treeVariables.treeLod1RenderCount + treeVariables.treeLod2RenderCount;
	}
	else if (lodResult.shadowLod == 4)
	{
		shadowIndex = atomicAdd(countData.lod4ShadowCount, 1);
		shadowIndexOffset = treeVariables.treeLod0RenderCount + treeVariables.treeLod1RenderCount + treeVariables.treeLod2RenderCount + treeVariables.treeLod3RenderCount;
	}
	else if (lodResult.shadowLod == 5)
	{
		shadowIndex = atomicAdd(countData.lod5ShadowCount, 1);
		shadowIndexOffset = treeVariables.treeLod0RenderCount + treeVariables.treeLod1RenderCount + treeVariables.treeLod2RenderCount + treeVariables.treeLod3RenderCount + treeVariables.treeLod4RenderCount;
	}

	indexResult.index = index;
	indexResult.offset = indexOffset;
	indexResult.shadowIndex = shadowIndex;
	indexResult.shadowOffset = shadowIndexOffset;

	return (indexResult);
}

void SetRenderData(in TreeComputeResult treeResult, in LodComputeResult lodResult, in IndexComputeResult indexResult)
{
	//vec3 viewPosition = variables.viewPosition;

	if (lodResult.lod > -1)
	{
		renderData[indexResult.index + indexResult.offset].posxz = packHalf2x16(treeResult.position.xz - treeResult.viewPosition.xz);
		renderData[indexResult.index + indexResult.offset].posyroty = packHalf2x16(vec2(treeResult.position.y - treeResult.viewPosition.y, treeResult.rotation));
		renderData[indexResult.index + indexResult.offset].scaxcoly = packHalf2x16(vec2(treeResult.scale, treeResult.color));
	}

	if (lodResult.shadowLod > -1)
	{
		shadowData[indexResult.shadowIndex + indexResult.shadowOffset].posxz = packHalf2x16(treeResult.position.xz - treeResult.viewPosition.xz);
		shadowData[indexResult.shadowIndex + indexResult.shadowOffset].posyroty = packHalf2x16(vec2(treeResult.position.y - treeResult.viewPosition.y, treeResult.rotation));
		shadowData[indexResult.shadowIndex + indexResult.shadowOffset].scaxcoly = packHalf2x16(vec2(treeResult.scale, treeResult.color));
	}
}

void ComputeLeafData(TreeComputeResult treeResult, LodComputeResult lodResult, IndexComputeResult indexResult)
{
	int leafLod = lodResult.shadowLod;

	if (leafLod < 0 || leafLod > 5) return;

	uint leafRenderIndex = indexResult.index * uint(treeVariables.leafCounts[leafLod].x) + uint(treeVariables.leafCounts[leafLod].y);
	uint leafShadowIndex = indexResult.shadowIndex * uint(treeVariables.leafCounts[leafLod].x) + uint(treeVariables.leafCounts[leafLod].y);
	int leafIndex = 0;
	mat4 rotationMatrix = GetRotationMatrix(radians(treeResult.rotation * 360.0), vec3(0.0, 1.0, 0.0));

	while (leafIndex < uint(treeVariables.leafCounts[0].x))
	{
		vec3 leafLocalPosition = (rotationMatrix * vec4(leafPositions[leafIndex].xyz * treeResult.scale, 1.0)).xyz;
		vec3 leafWorldPosition = treeResult.position.xyz + leafLocalPosition - treeResult.viewPosition.xyz;

		float scaleMult = treeVariables.leafCounts[leafLod].w;
		if (leafLod < 5 && lodResult.lodDis > leafBlendStart && leafIndex % int(treeVariables.leafCounts[leafLod + 1].z) == 0)
		{
			scaleMult = mix(scaleMult, treeVariables.leafCounts[leafLod + 1].w, (lodResult.lodDis - leafBlendStart) * leafBlendMult);
		}

		float leafLodScale = 2.0 + scaleMult;
		if (leafLod < 5 && lodResult.lodDis > leafFadeStart && leafIndex % int(treeVariables.leafCounts[leafLod + 1].z) != 0)
		{
			leafLodScale = mix(leafLodScale, 0.1, (lodResult.lodDis - leafFadeStart) * leafFadeMult);
		}

		float leafRan = length(leafPositions[leafIndex].xyz) + treeResult.dataIndex;
		float leafScale = leafLodScale + (Random11(leafRan) * leafLodScale) * 0.25;
		float leafRotationX = Random01(leafIndex * 0.001 + leafRan);
		float leafRotationY = Random01(leafIndex * 0.001 * 2.0 + leafRan * 0.5);
		float leafRotationZ = Random01(leafIndex * 0.001 * 0.5 + leafRan * 10.0);
		float leafColor = 1.0 + (Random01(leafIndex * 0.001 * 0.5 + leafRan * 2.0 + leafRotationX + leafRotationY) - 0.5);

		leafRotationZ = 1.0;

		float leafSturdiness = 0.0;
		if (leafLod <= 1) leafSturdiness = leafPositions[leafIndex].w;

		LeafData leafData;
		leafData.posxz = packHalf2x16(leafWorldPosition.xz);
		leafData.posyroty = packHalf2x16(vec2(leafWorldPosition.y, leafRotationY));
		leafData.scalxrotx = packHalf2x16(vec2(leafScale * treeResult.scale, leafRotationX));
		leafData.colxnormx = packHalf2x16(vec2(leafColor, leafLocalPosition.x));
		leafData.normyz = packHalf2x16(vec2(leafLocalPosition.y, leafLocalPosition.z));
		leafData.sturxlody = packHalf2x16(vec2(leafSturdiness, leafLod));
		
		if (lodResult.lod > -1) leavesRenderData[leafRenderIndex] = leafData;
		if (lodResult.shadowLod > -1) leavesShadowData[leafShadowIndex] = leafData;

		leafRenderIndex++;
		leafShadowIndex++;
		leafIndex += int(treeVariables.leafCounts[leafLod].z);
	}
}

void ComputeSharedLeafData(int id, TreeComputeResult treeResult, LodComputeResult lodResult, IndexComputeResult indexResult)
{
	int leafLod = lodResult.shadowLod;

	if (leafLod < 0 || leafLod > 5) return;

	float sharedRange = 1.0 / (float(gl_WorkGroupSize.z) - 1.0);

	int sharedIndexOffset = int(floor(float(treeVariables.leafCounts[0].x * sharedRange) / treeVariables.leafCounts[leafLod].z) * treeVariables.leafCounts[leafLod].z);

	int sharedIndexStart = sharedIndexOffset * id;
	int sharedIndexEnd = sharedIndexStart + sharedIndexOffset;
	uint sharedRenderStart = uint(treeVariables.leafCounts[leafLod].x * sharedRange) * uint(id);
	uint sharedRenderEnd = sharedRenderStart + uint(treeVariables.leafCounts[leafLod].x * sharedRange);

	uint leafRenderIndex = indexResult.index * uint(treeVariables.leafCounts[leafLod].x) + uint(treeVariables.leafCounts[leafLod].y) + sharedRenderStart;
	uint leafShadowIndex = indexResult.shadowIndex * uint(treeVariables.leafCounts[leafLod].x) + uint(treeVariables.leafCounts[leafLod].y) + sharedRenderStart;
	int leafIndex = sharedIndexStart;
	mat4 rotationMatrix = GetRotationMatrix(radians(treeResult.rotation * 360.0), vec3(0.0, 1.0, 0.0));

	//while (leafIndex < uint(treeVariables.leafCounts[0].x))
	while (leafIndex < sharedIndexEnd)
	{
		vec3 leafLocalPosition = (rotationMatrix * vec4(leafPositions[leafIndex].xyz * treeResult.scale, 1.0)).xyz;
		vec3 leafWorldPosition = treeResult.position.xyz + leafLocalPosition - treeResult.viewPosition.xyz;

		float scaleMult = treeVariables.leafCounts[leafLod].w;
		if (leafLod < 5 && lodResult.lodDis > leafBlendStart && leafIndex % int(treeVariables.leafCounts[leafLod + 1].z) == 0)
		{
			scaleMult = mix(scaleMult, treeVariables.leafCounts[leafLod + 1].w, (lodResult.lodDis - leafBlendStart) * leafBlendMult);
		}

		float leafLodScale = 2.0 + scaleMult;
		if (leafLod < 5 && lodResult.lodDis > leafFadeStart && leafIndex % int(treeVariables.leafCounts[leafLod + 1].z) != 0)
		{
			leafLodScale = mix(leafLodScale, 0.1, (lodResult.lodDis - leafFadeStart) * leafFadeMult);
		}

		float leafRan = length(leafPositions[leafIndex].xyz) + treeResult.dataIndex;
		float leafScale = leafLodScale + (Random11(leafRan) * leafLodScale) * 0.25;
		float leafRotationX = Random01(leafIndex * 0.001 + leafRan);
		float leafRotationY = Random01(leafIndex * 0.001 * 2.0 + leafRan * 0.5);
		float leafRotationZ = Random01(leafIndex * 0.001 * 0.5 + leafRan * 10.0);
		float leafColor = 1.0 + (Random01(leafIndex * 0.001 * 0.5 + leafRan * 2.0 + leafRotationX + leafRotationY) - 0.5);

		leafRotationZ = 1.0;

		float leafSturdiness = 0.0;
		if (leafLod <= 1) leafSturdiness = leafPositions[leafIndex].w;

		LeafData leafData;
		leafData.posxz = packHalf2x16(leafWorldPosition.xz);
		leafData.posyroty = packHalf2x16(vec2(leafWorldPosition.y, leafRotationY));
		leafData.scalxrotx = packHalf2x16(vec2(leafScale * treeResult.scale, leafRotationX));
		leafData.colxnormx = packHalf2x16(vec2(leafColor, leafLocalPosition.x));
		leafData.normyz = packHalf2x16(vec2(leafLocalPosition.y, leafLocalPosition.z));
		leafData.sturxlody = packHalf2x16(vec2(leafSturdiness, leafLod));
		
		if (lodResult.lod > -1) leavesRenderData[leafRenderIndex] = leafData;
		if (lodResult.shadowLod > -1) leavesShadowData[leafShadowIndex] = leafData;

		leafRenderIndex++;
		leafShadowIndex++;
		leafIndex += int(treeVariables.leafCounts[leafLod].z);
	}
}

void main()
{
	if (gl_GlobalInvocationID.x > treeVariables.treeTotalRenderBase || gl_GlobalInvocationID.y > treeVariables.treeTotalRenderBase) return;

	if ((gl_GlobalInvocationID.x == 0 && gl_GlobalInvocationID.y == 0 && gl_GlobalInvocationID.z == 0))
	{
		atomicExchange(countData.lod0RenderCount, 0);
		atomicExchange(countData.lod1RenderCount, 0);
		atomicExchange(countData.lod2RenderCount, 0);
		atomicExchange(countData.lod3RenderCount, 0);
		atomicExchange(countData.lod4RenderCount, 0);
		atomicExchange(countData.lod5RenderCount, 0);

		atomicExchange(countData.lod0ShadowCount, 0);
		atomicExchange(countData.lod1ShadowCount, 0);
		atomicExchange(countData.lod2ShadowCount, 0);
		atomicExchange(countData.lod3ShadowCount, 0);
		atomicExchange(countData.lod4ShadowCount, 0);
		atomicExchange(countData.lod5ShadowCount, 0);
	}

	uint localIndex = gl_LocalInvocationID.y * gl_WorkGroupSize.x + gl_LocalInvocationID.x;

	if (gl_LocalInvocationID.z == 0)
	{
		sharedRender[localIndex] = 0;

		TreeComputeResult treeResult = ComputeTreeData();
		if (treeResult.render != 1) return;

		LodComputeResult lodResult = ComputeLod(treeResult);
		if (lodResult.lod == -1 && lodResult.shadowLod == -1) return;
	
		IndexComputeResult indexResult = ComputeIndex(lodResult);

		SetRenderData(treeResult, lodResult, indexResult);

		sharedTreeResults[localIndex] = treeResult;
		sharedLodResults[localIndex] = lodResult;
		sharedIndexResults[localIndex] = indexResult;
		sharedRender[localIndex] = 1;

		return;

		//memoryBarrierShared();

		//ComputeLeafData(treeResult, lodResult, indexResult);
	}

	barrier();
	if (sharedRender[localIndex] == 0) return;
	int id = int(gl_LocalInvocationID.z) - 1;
	ComputeSharedLeafData(id, sharedTreeResults[localIndex], sharedLodResults[localIndex], sharedIndexResults[localIndex]);
}