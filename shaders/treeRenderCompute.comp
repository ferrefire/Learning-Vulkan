#version 450

#extension GL_ARB_shading_language_include : require

struct CountData
{
	uint lod0Count;
	uint lod1Count;
	uint lod2Count;
	uint lod3Count;
	//uint leafCount;
};

struct TreeData
{
	uint posxz;
	uint posyroty;
	uint scaxcoly;
	uint life;
};

struct TreeRenderData
{
	uint posxz;
	uint posyroty;
	uint scaxcoly;
	//vec3 position;
	//vec3 rotscacol;
};

struct LeafData
{
	uint posxz;
	uint posyroty;
	uint scalxrotx;
	uint colx;
	//vec3 position;
};

layout(std430, set = 1, binding = 0) buffer DataBuffer
{
	TreeData data[];
};

layout(std430, set = 1, binding = 1) buffer RenderBuffer
{
	TreeRenderData renderData[];
};

layout(std430, set = 1, binding = 2) buffer CountBuffer
{
	CountData countData;
};

layout(set = 1, binding = 3) uniform TreeVariables
{
	uint treeBase;
	uint treeCount;
	uint treeLod0RenderBase;
	uint treeLod0RenderCount;
	uint treeLod1RenderBase;
	uint treeLod1RenderCount;
	uint treeLod2RenderBase;
	uint treeLod2RenderCount;
	uint treeLod3RenderBase;
	uint treeLod3RenderCount;
	uint treeTotalRenderBase;
	uint treeTotalRenderCount;
	float spacing;
	float spacingMult;
	uint leafCountTotal;
	uint leafCount0;
	uint leafCount1;
	uint leafCount2;
} treeVariables;

layout(std430, set = 1, binding = 4) buffer LeavesBuffer
{
	LeafData leavesData[];
};

layout(std430, set = 1, binding = 5) buffer LeafPositionsBuffer
{
	vec4 leafPositions[];
};

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "variables.glsl"
#include "functions.glsl"
#include "heightmap.glsl"
#include "culling.glsl"
#include "transformation.glsl"

int Inside(vec2 pos)
{
	float dis = SquaredDistanceVec2(pos, vec2(0));

	if (dis >= pow(treeVariables.treeTotalRenderBase * 0.5, 2)) return (-1);
	else if (dis >= pow(treeVariables.treeLod2RenderBase * 0.5, 2)) return (3);
	else if (dis >= pow(treeVariables.treeLod1RenderBase * 0.5, 2)) return (2);
	else if (dis >= pow(treeVariables.treeLod0RenderBase * 0.5, 2)) return (1);
	else return (0);
}

int InsideWorld(vec3 pos)
{
	float dis = SquaredDistance(pos, variables.viewPosition);

	if (dis >= pow(treeVariables.treeTotalRenderBase * treeVariables.spacing * 0.5, 2)) return (-1);
	else if (dis >= pow(treeVariables.treeLod2RenderBase * treeVariables.spacing * 0.5, 2)) return (3);
	else if (dis >= pow(treeVariables.treeLod1RenderBase * treeVariables.spacing * 0.5, 2)) return (2);
	else if (dis >= pow(treeVariables.treeLod0RenderBase * treeVariables.spacing * 0.5, 2)) return (1);
	else return (0);
}

float InsideWorldInter(vec3 pos)
{
	float dis = SquaredDistance(pos, variables.viewPosition);
	float dis3 = pow(treeVariables.treeTotalRenderBase * treeVariables.spacing * 0.5, 2);
	float dis2 = pow(treeVariables.treeLod2RenderBase * treeVariables.spacing * 0.5, 2);
	float dis1 = pow(treeVariables.treeLod1RenderBase * treeVariables.spacing * 0.5, 2);
	float dis0 = pow(treeVariables.treeLod0RenderBase * treeVariables.spacing * 0.5, 2);

	if (dis >= dis3) return (-1);
	else if (dis >= dis2)
	{
		return (3.0 + ((dis - dis2) / (dis3 - dis2)));
	}
	else if (dis >= dis1)
	{
		return (2.0 + ((dis - dis1) / (dis2 - dis1)));
	}
	else if (dis >= dis0)
	{
		return (1.0 + ((dis - dis0) / (dis1 - dis0)));
	}
	else
	{
		return (dis / dis0);
	}
}

void main()
{
	if (gl_GlobalInvocationID.x > treeVariables.treeTotalRenderBase || gl_GlobalInvocationID.y > treeVariables.treeTotalRenderBase) return;

	if (gl_GlobalInvocationID.x == 0 && gl_GlobalInvocationID.y == 0)
	{
		atomicExchange(countData.lod0Count, 0);
		atomicExchange(countData.lod1Count, 0);
		atomicExchange(countData.lod2Count, 0);
		atomicExchange(countData.lod3Count, 0);
		//atomicExchange(countData.leafCount, 0);
	}

	//vec2 flooredViewPosition = vec2(0);
	//flooredViewPosition.x = round((variables.viewPosition.x) * treeVariables.spacingMult);
	//flooredViewPosition.y = round((variables.viewPosition.z) * treeVariables.spacingMult);
	vec2 flooredViewPosition = floor(variables.viewPosition.xz * treeVariables.spacingMult);

	ivec2 ixz = ivec2(gl_GlobalInvocationID.xy) - ivec2(treeVariables.treeTotalRenderBase * 0.5);

	//int ix = int(gl_GlobalInvocationID.x) - int(treeVariables.treeTotalRenderBase * 0.5);
	//int iz = int(gl_GlobalInvocationID.y) - int(treeVariables.treeTotalRenderBase * 0.5);

	//int lod = Inside(ixz);
	//if (lod == -1) return ;

	//ix += int(flooredViewPosition.x);
	//iz += int(flooredViewPosition.y);
	ixz += ivec2(flooredViewPosition);

	vec2 worldOffset = ixz;

	//ix += int(floor((variables.terrainOffset.x) * treeVariables.spacingMult));
	//iz += int(floor((variables.terrainOffset.y) * treeVariables.spacingMult));
	ixz += ivec2(floor(variables.terrainOffset.xy * treeVariables.spacingMult));

	vec2 dataIndexVec = vec2(treeVariables.treeBase * 0.5) + ixz;

	if (dataIndexVec.x < 0 || dataIndexVec.x > treeVariables.treeBase || dataIndexVec.y < 0 || dataIndexVec.y > treeVariables.treeBase) return ;

	uint dataIndex = uint(floor(dataIndexVec.x * treeVariables.treeBase + dataIndexVec.y));

	if (data[dataIndex].life == 0) return;


	vec3 offset = vec3(0);
	offset.xz = unpackHalf2x16(data[dataIndex].posxz);
	vec2 posyroty = unpackHalf2x16(data[dataIndex].posyroty);
	offset.y = posyroty.x;
	float rotation = posyroty.y;
	//vec2 xx = unpackHalf2x16(data[gl_InstanceIndex].scaxcoly);
	//scale = xx.x;
	//color = xx.y;

	float x = worldOffset.x * treeVariables.spacing + offset.x;
	float z = worldOffset.y * treeVariables.spacing + offset.z;
	float y = SampleDynamic(vec2(x, z)) * 5000.0 - 1.0;
	vec3 worldPosition = vec3(x, y, z);

	float lodInter = InsideWorldInter(worldPosition);
	if (lodInter == -1) return ;
	int lod = int(floor(lodInter));
	if (lod == -1) return ;

	float viewFactor = 50.0 / float(lod + 1);
	float inDis = 1.75;
	if (lod == 0) inDis = 1.35;
	if (lod == 1) inDis = 1.8;
	if (lod == 2) inDis = 1.5;
	if (lod == 3) inDis = 1.25;
	if (AreaInView(worldPosition + vec3(0, viewFactor, 0), vec2(viewFactor * 0.75, viewFactor), inDis) == 0) return;

	//float occludeFactor = 50.0 / float(clamp(lod, 1, 3));
	//if (AreaOccluded(worldPosition + vec3(0, occludeFactor, 0), vec2(occludeFactor * 0.25, occludeFactor), 2.0) == 1) return;

	float scale = 1.0;
	float color = 1.0;

	uint index = 0;

	//rotation = 0;
	uint indexOffset = 0;

	if (lod == 0)
	{
		index = atomicAdd(countData.lod0Count, 1);
	}
	else if (lod == 1)
	{
		index = atomicAdd(countData.lod1Count, 1);
		indexOffset = treeVariables.treeLod0RenderCount;
	}
	else if (lod == 2)
	{
		index = atomicAdd(countData.lod2Count, 1);
		indexOffset = treeVariables.treeLod0RenderCount + treeVariables.treeLod1RenderCount;
	}
	else if (lod == 3)
	{
		index = atomicAdd(countData.lod3Count, 1);
		indexOffset = treeVariables.treeLod0RenderCount + treeVariables.treeLod1RenderCount + treeVariables.treeLod2RenderCount;
	}

	renderData[index + indexOffset].posxz = packHalf2x16(worldPosition.xz - variables.viewPosition.xz);
	renderData[index + indexOffset].posyroty = packHalf2x16(vec2(worldPosition.y - variables.viewPosition.y, rotation));
	renderData[index + indexOffset].scaxcoly = packHalf2x16(vec2(scale, color));

	//renderData[index].position = worldPosition - variables.viewPosition;
	//renderData[index].rotscacol = vec3(rotation, scale, color);

	if (lod > 2) return;

	mat4 rotationMatrix = GetRotationMatrix(radians(rotation * 360.0), vec3(0.0, 1.0, 0.0));
	vec3 rotatedPosition = vec3(0);
	uint leafIndex = 0;
	float leafRan = 0;
	int leafCountOffset = lod == 0 ? 0 : int(treeVariables.leafCount0); 
	int currentLeafIndex = 0;
	float disMult = 1.0 + clamp(lodInter - 1.0, 0.0, 1.0);
	for (int i = 0; (i + leafCountOffset) < treeVariables.leafCountTotal; i++)
	{
		currentLeafIndex = i + leafCountOffset;
		rotatedPosition = (worldPosition + (rotationMatrix * vec4(leafPositions[currentLeafIndex].xyz, 1.0)).xyz);
		if (lod == 0) leafIndex = index * treeVariables.leafCountTotal + i;
		if (lod == 1) leafIndex = index * treeVariables.leafCount1 + i + (indexOffset * treeVariables.leafCountTotal);
		if (lod == 2)
		{
			if (i % 2 != 0) continue ;
			leafIndex = index * treeVariables.leafCount2;
			leafIndex += i / 2;
			leafIndex += (treeVariables.treeLod0RenderCount * treeVariables.leafCountTotal);
			leafIndex += (treeVariables.treeLod1RenderCount * treeVariables.leafCount1);
		}
		//leafIndex += (lod == 0 ? 0 : (treeVariables.leafCountTotal * treeVariables.treeLod0RenderCount));
		//if (InView(rotatedPosition, 0) == 0) continue;

		leafRan = length(leafPositions[currentLeafIndex].xyz);
		float leafLodScale = (i >= treeVariables.leafCount0 ? 2.0 : 1.0) * (lod == 0 ? 1.0 : 2.0);
		float leafScale = leafLodScale + (Random11(leafRan) * leafLodScale) * 0.25;
		float leafRotationX = Random01(leafScale + leafRan);
		float leafRotationY = Random01(leafScale * 2.0 + leafRan * 0.5);
		float leafColor = 0.5 + Random01(leafScale * 0.5 + leafRan * 2.0 + leafRotationX + leafRotationY) * 0.5;

		rotatedPosition -= variables.viewPosition;
			
		//leafIndex = atomicAdd(countData.leafCount, 1);

		leavesData[leafIndex].posxz = packHalf2x16(rotatedPosition.xz);
		leavesData[leafIndex].posyroty = packHalf2x16(vec2(rotatedPosition.y, leafRotationY));
		leavesData[leafIndex].scalxrotx = packHalf2x16(vec2(leafScale * disMult, leafRotationX));
		leavesData[leafIndex].colx = packHalf2x16(vec2(leafColor, 0.0));
	}
}