#version 450

#extension GL_ARB_shading_language_include : require

struct CountData
{
	uint lod0Count;
	uint lod1Count;
	uint lod2Count;
	uint lod3Count;
	uint lod4Count;
	//uint leafCount;
};

struct TreeData
{
	uint posxz;
	uint posyroty;
	uint scaxcoly;
	uint life;
};

struct TreeRenderData
{
	uint posxz;
	uint posyroty;
	uint scaxcoly;
	//vec3 position;
	//vec3 rotscacol;
};

struct LeafData
{
	uint posxz;
	uint posyroty;
	uint scalxrotx;
	uint colxnormx;
	uint normyz;
};

layout(std430, set = 1, binding = 0) readonly restrict buffer DataBuffer
{
	TreeData data[];
};

layout(std430, set = 1, binding = 1) buffer RenderBuffer
{
	TreeRenderData renderData[];
};

layout(std430, set = 1, binding = 2) buffer CountBuffer
{
	CountData countData;
};

layout(set = 1, binding = 3) uniform TreeVariables
{
	uint treeBase;
	uint treeCount;
	uint treeLod0RenderBase;
	uint treeLod0RenderCount;
	uint treeLod1RenderBase;
	uint treeLod1RenderCount;
	uint treeLod2RenderBase;
	uint treeLod2RenderCount;
	uint treeLod3RenderBase;
	uint treeLod3RenderCount;
	uint treeLod4RenderBase;
	uint treeLod4RenderCount;
	uint treeTotalRenderBase;
	uint treeTotalRenderCount;
	float spacing;
	float spacingMult;
	//uint leafCountTotal;
	//uint leafCount0;
	//uint leafCount1;
	//uint leafCount2;
	//uint leafCount3;
	//uint leafCount4;
	vec4 leafCounts[5];
} treeVariables;

layout(std430, set = 1, binding = 4) buffer LeavesBuffer
{
	LeafData leavesData[];
};

layout(std430, set = 1, binding = 5) readonly restrict buffer LeafPositionsBuffer
{
	vec4 leafPositions[];
};

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "variables.glsl"
#include "functions.glsl"
#include "heightmap.glsl"
#include "culling.glsl"
#include "transformation.glsl"

const int frustumCheckDis = 35 * 35;
//const vec3 treeCenter = vec3(-3.05, 47.22, -5.725);
const vec3 treeCenter = vec3(0.0, 40.0, 0.0);

int Inside(vec2 pos)
{
	float dis = SquaredDistanceVec2(pos, vec2(0));

	if (dis >= pow(treeVariables.treeTotalRenderBase * 0.5, 2)) return (-1);
	else if (dis >= pow(treeVariables.treeLod2RenderBase * 0.5, 2)) return (3);
	else if (dis >= pow(treeVariables.treeLod1RenderBase * 0.5, 2)) return (2);
	else if (dis >= pow(treeVariables.treeLod0RenderBase * 0.5, 2)) return (1);
	else return (0);
}

int InsideWorld(vec3 pos)
{
	float dis = SquaredDistance(pos, variables.viewPosition);

	if (dis >= pow(treeVariables.treeTotalRenderBase * treeVariables.spacing * 0.5, 2)) return (-1);
	else if (dis >= pow(treeVariables.treeLod2RenderBase * treeVariables.spacing * 0.5, 2)) return (3);
	else if (dis >= pow(treeVariables.treeLod1RenderBase * treeVariables.spacing * 0.5, 2)) return (2);
	else if (dis >= pow(treeVariables.treeLod0RenderBase * treeVariables.spacing * 0.5, 2)) return (1);
	else return (0);
}

float InsideWorldInter(float dis)
{
	//float dis = SquaredDistance(pos, variables.viewPosition);
	float dis4 = pow(treeVariables.treeTotalRenderBase * treeVariables.spacing * 0.5, 2);
	float dis3 = pow(treeVariables.treeLod3RenderBase * treeVariables.spacing * 0.5, 2);
	float dis2 = pow(treeVariables.treeLod2RenderBase * treeVariables.spacing * 0.5, 2);
	float dis1 = pow(treeVariables.treeLod1RenderBase * treeVariables.spacing * 0.5, 2);
	float dis0 = pow(treeVariables.treeLod0RenderBase * treeVariables.spacing * 0.5, 2);

	if (dis >= dis4) return (-1);
	else if (dis >= dis3)
	{
		return (4.0 + ((dis - dis3) / (dis4 - dis3)));
	}
	else if (dis >= dis2)
	{
		return (3.0 + ((dis - dis2) / (dis3 - dis2)));
	}
	else if (dis >= dis1)
	{
		return (2.0 + ((dis - dis1) / (dis2 - dis1)));
	}
	else if (dis >= dis0)
	{
		return (1.0 + ((dis - dis0) / (dis1 - dis0)));
	}
	else
	{
		return (dis / dis0);
	}
}

void main()
{
	if (gl_GlobalInvocationID.x > treeVariables.treeTotalRenderBase || gl_GlobalInvocationID.y > treeVariables.treeTotalRenderBase) return;

	if (gl_GlobalInvocationID.x == 0 && gl_GlobalInvocationID.y == 0)
	{
		atomicExchange(countData.lod0Count, 0);
		atomicExchange(countData.lod1Count, 0);
		atomicExchange(countData.lod2Count, 0);
		atomicExchange(countData.lod3Count, 0);
		atomicExchange(countData.lod4Count, 0);
		//atomicExchange(countData.leafCount, 0);
	}

	vec3 viewPosition = variables.viewPosition;
	vec2 flooredViewPosition = floor(viewPosition.xz * treeVariables.spacingMult);
	ivec2 ixz = ivec2(gl_GlobalInvocationID.xy) - ivec2(treeVariables.treeTotalRenderBase * 0.5);
	ixz += ivec2(flooredViewPosition);
	vec2 worldOffset = ixz;
	ixz += ivec2(floor(variables.terrainOffset.xz * treeVariables.spacingMult));
	vec2 dataIndexVec = vec2(treeVariables.treeBase * 0.5) + ixz;

	if (dataIndexVec.x < 0 || dataIndexVec.x > treeVariables.treeBase || dataIndexVec.y < 0 || dataIndexVec.y > treeVariables.treeBase) return ;
	uint dataIndex = uint(floor(dataIndexVec.x * treeVariables.treeBase + dataIndexVec.y));
	if (data[dataIndex].life == 0) return;

	vec3 offset = vec3(0);
	offset.xz = unpackHalf2x16(data[dataIndex].posxz);
	vec2 posyroty = unpackHalf2x16(data[dataIndex].posyroty);
	offset.y = posyroty.x;
	float rotation = posyroty.y;
	vec2 xx = unpackHalf2x16(data[dataIndex].scaxcoly);
	float scale = xx.x;
	float color = xx.y;

	float x = worldOffset.x * treeVariables.spacing + offset.x;
	float z = worldOffset.y * treeVariables.spacing + offset.z;
	float y = GetTerrainHeight(vec2(x, z)) - 1.0;
	vec3 worldPosition = vec3(x, y, z);
	float viewDistance = SquaredDistance(worldPosition + vec3(0, 30, 0), viewPosition);

	float lodInter = InsideWorldInter(viewDistance);
	if (lodInter == -1) return ;
	int lod = int(floor(lodInter));
	if (lod == -1) return ;
	float viewFactor = 50.0 / float(lod + 1);
	float inDis = 1.75;
	if (lod == 0) inDis = 1.35;
	if (lod == 1) inDis = 1.8;
	if (lod == 2) inDis = 1.5;

	if (lod > 2)
	{
		if (InView(worldPosition, 0) == 0) return;
	}
	else if (lod > 1)
	{
		if (AreaInView2(worldPosition + vec3(0, 30, 0), 30.0) == 0) return;
	}
	else if (lod > 0)
	{
		if (AreaInView2(worldPosition + vec3(0, 30, 0), 30.0) == 0)
		{
			lod = 3;
		}
	}
	else
	{
		if (AreaInView2(worldPosition + vec3(0, 30, 0), 30.0) == 0)
		{
			lod = 1;
		}
	}
	if (Occluded(WorldToCull(worldPosition + vec3(0, 60, 0)), 0.005) == 1) return;

	uint index = 0;
	uint indexOffset = 0;

	if (lod == 0)
	{
		index = atomicAdd(countData.lod0Count, 1);
	}
	else if (lod == 1)
	{
		index = atomicAdd(countData.lod1Count, 1);
		indexOffset = treeVariables.treeLod0RenderCount;
	}
	else if (lod == 2)
	{
		index = atomicAdd(countData.lod2Count, 1);
		indexOffset = treeVariables.treeLod0RenderCount + treeVariables.treeLod1RenderCount;
	}
	else if (lod == 3)
	{
		index = atomicAdd(countData.lod3Count, 1);
		indexOffset = treeVariables.treeLod0RenderCount + treeVariables.treeLod1RenderCount + treeVariables.treeLod2RenderCount;
	}
	else if (lod == 4)
	{
		index = atomicAdd(countData.lod4Count, 1);
		indexOffset = treeVariables.treeLod0RenderCount + treeVariables.treeLod1RenderCount + treeVariables.treeLod2RenderCount + treeVariables.treeLod3RenderCount;
	}

	renderData[index + indexOffset].posxz = packHalf2x16(worldPosition.xz - viewPosition.xz);
	renderData[index + indexOffset].posyroty = packHalf2x16(vec2(worldPosition.y - viewPosition.y, rotation));
	renderData[index + indexOffset].scaxcoly = packHalf2x16(vec2(scale, color));

	if (lod > 4) return;

	uint leafDataIndex = index * uint(treeVariables.leafCounts[lod].x) + uint(treeVariables.leafCounts[lod].y);
	int leafIndex = 0;
	mat4 rotationMatrix = GetRotationMatrix(radians(rotation * 360.0), vec3(0.0, 1.0, 0.0));

	while (leafIndex < uint(treeVariables.leafCounts[0].x))
	{
		vec3 leafLocalPosition = (rotationMatrix * vec4(leafPositions[leafIndex].xyz * scale, 1.0)).xyz;
		vec3 leafWorldPosition = worldPosition + leafLocalPosition - viewPosition;

		float scaleMult = treeVariables.leafCounts[lod].w;
		float lodDis = lodInter - lod;
		if (lod < 4 && lodDis > 0.75 && leafIndex % int(treeVariables.leafCounts[lod + 1].z) == 0)
		{
			scaleMult = mix(scaleMult, treeVariables.leafCounts[lod + 1].w, (lodDis - 0.75) * 4.0);
		}
		float leafLodScale = 2.0 + scaleMult;
		if (lod < 4 && lodDis > 0.75 && leafIndex % int(treeVariables.leafCounts[lod + 1].z) != 0)
		{
			leafLodScale = mix(leafLodScale, 0.0, (lodDis - 0.75) * 4.0);
		}
		//leafLodScale += leafIndex % (int(treeVariables.leafCounts[lod].z) * 2) == 0 ? treeVariables.leafCounts[lod].w * 0.5 : 0.0;
		float leafRan = length(leafPositions[leafIndex].xyz);
		float leafScale = leafLodScale + (Random11(leafRan) * leafLodScale) * 0.25;
		float leafRotationX = Random01(leafIndex * 0.001 + leafRan);
		float leafRotationY = Random01(leafIndex * 0.001 * 2.0 + leafRan * 0.5);
		float leafColor = 1.0 + (Random01(leafIndex * 0.001 * 0.5 + leafRan * 2.0 + leafRotationX + leafRotationY) - 0.5);

		LeafData leafData;
		leafData.posxz = packHalf2x16(leafWorldPosition.xz);
		leafData.posyroty = packHalf2x16(vec2(leafWorldPosition.y, leafRotationY));
		leafData.scalxrotx = packHalf2x16(vec2(leafScale * scale, leafRotationX));
		leafData.colxnormx = packHalf2x16(vec2(leafColor, leafLocalPosition.x));
		leafData.normyz = packHalf2x16(vec2(leafLocalPosition.y, leafLocalPosition.z));
		leavesData[leafDataIndex] = leafData;

		leafDataIndex++;
		leafIndex += int(treeVariables.leafCounts[lod].z);
	}

	/*

	if (lod > -1) return;
	if (lod > 4) return;

	mat4 rotationMatrix = GetRotationMatrix(radians(rotation * 360.0), vec3(0.0, 1.0, 0.0));
	vec3 rotatedPosition = vec3(0);
	uint leafIndex = 0;
	float leafRan = 0;
	//int leafCountOffset = lod == 0 ? 0 : int(treeVariables.leafCount0); 
	int currentLeafIndex = 0;
	//float disMult = 1.0 + clamp(lodInter - 1.0, 0.0, 2.0);
	//for (int i = 0; (i + leafCountOffset) < treeVariables.leafCountTotal; i++)
	while (leafIndex < treeVariables.leafCountTotal)
	{
		float scaleMult = 1.0;
		//currentLeafIndex = i + leafCountOffset;
		//vec3 rotatedNormal = (rotationMatrix * vec4(normalize(leafPositions[currentLeafIndex].xyz - treeCenter), 0.0)).xyz;
		vec3 rotatedLeafPosition = (rotationMatrix * vec4(leafPositions[leafIndex].xyz * scale, 1.0)).xyz;
		vec3 rotatedNormal = rotatedLeafPosition;
		rotatedPosition = worldPosition + rotatedLeafPosition;

		/*if (lod == 0)
		{
			leafIndex = index * treeVariables.leafCountTotal + i;
			if (i >= treeVariables.leafCount0) scaleMult = 2.0;
			if (i % 2 == 0) scaleMult += 1.0;
		}
		else if (lod == 1)
		{
			leafIndex = index * treeVariables.leafCount1 + i + (indexOffset * treeVariables.leafCountTotal);
			scaleMult = 2.0;
			if (i % 2 == 0) scaleMult += 1.0;
		}
		else if (lod == 2)
		{
			if (i % 2 != 0) continue ;
			leafIndex = index * treeVariables.leafCount2;
			leafIndex += int(ceil(float(i) / 2.0));
			leafIndex += (treeVariables.treeLod0RenderCount * treeVariables.leafCountTotal);
			leafIndex += (treeVariables.treeLod1RenderCount * treeVariables.leafCount1);
			scaleMult = 3.0;
		}
		else if (lod == 3)
		{
			if (i % 8 != 0) continue ;
			leafIndex = index * treeVariables.leafCount3;
			leafIndex += int(ceil(float(i) / 8.0));
			leafIndex += (treeVariables.treeLod0RenderCount * treeVariables.leafCountTotal);
			leafIndex += (treeVariables.treeLod1RenderCount * treeVariables.leafCount1);
			leafIndex += (treeVariables.treeLod2RenderCount * treeVariables.leafCount2);
			scaleMult = 6.0;
		}
		else if (lod == 4)
		{
			if (i % 16 != 0) continue ;
			leafIndex = index * treeVariables.leafCount4;
			leafIndex += int(ceil(float(i) / 16.0));
			leafIndex += (treeVariables.treeLod0RenderCount * treeVariables.leafCountTotal);
			leafIndex += (treeVariables.treeLod1RenderCount * treeVariables.leafCount1);
			leafIndex += (treeVariables.treeLod2RenderCount * treeVariables.leafCount2);
			leafIndex += (treeVariables.treeLod3RenderCount * treeVariables.leafCount3);
			scaleMult = 9.0;
		}
		//if (currentLeafIndex >= treeVariables.leafCount0) scaleMult += 1.0;
		//if (currentLeafIndex % 2 == 0) scaleMult += 1.0;
		//if (currentLeafIndex % 4 == 0) scaleMult += 1.0;
		//if (lod == 3) scaleMult += 3.0;
		//if (lod == 4) scaleMult += 6.0;
		//leafIndex += (lod == 0 ? 0 : (treeVariables.leafCountTotal * treeVariables.treeLod0RenderCount));
		//if (InView(rotatedPosition, 0) == 0) continue;

		leafRan = length(leafPositions[currentLeafIndex].xyz);
		float leafLodScale = scaleMult;
		float leafScale = leafLodScale + (Random11(leafRan) * leafLodScale) * 0.25;
		float leafRotationX = Random01(leafScale + leafRan);
		float leafRotationY = Random01(leafScale * 2.0 + leafRan * 0.5);
		float leafColor = 1.0 + (Random01(leafScale * 0.5 + leafRan * 2.0 + leafRotationX + leafRotationY) - 0.5);
		rotatedPosition -= viewPosition;

		leafRan = length(leafPositions[leafIndex].xyz);
		float leafLodScale = lod + 1;
		float leafScale = leafLodScale + (Random11(leafRan) * leafLodScale) * 0.25;
		float leafRotationX = Random01(leafScale + leafRan);
		float leafRotationY = Random01(leafScale * 2.0 + leafRan * 0.5);
		float leafColor = 1.0 + (Random01(leafScale * 0.5 + leafRan * 2.0 + leafRotationX + leafRotationY) - 0.5);
		rotatedPosition -= viewPosition;

		int dataIndex = index * treeVariables.leafCount + leafIndex;

		leavesData[dataIndex].posxz = packHalf2x16(rotatedPosition.xz);
		leavesData[dataIndex].posyroty = packHalf2x16(vec2(rotatedPosition.y, leafRotationY));
		leavesData[dataIndex].scalxrotx = packHalf2x16(vec2(leafScale * scale, leafRotationX));
		leavesData[dataIndex].colxnormx = packHalf2x16(vec2(leafColor, rotatedNormal.x));
		leavesData[dataIndex].normyz = packHalf2x16(vec2(rotatedNormal.y, rotatedNormal.z));
	}
	*/
}