#version 450

#extension GL_ARB_shading_language_include : require

struct TreeData
{
	uint posxz;
	uint posyroty;
	uint scaxcoly;
};

layout(std430, set = 1, binding = 0) buffer DataBuffer
{
	TreeData data[];
};

layout(set = 1, binding = 1) uniform TreeVariables
{
	uint treeBase;
	uint treeCount;
	uint treeLod0RenderBase;
	uint treeLod0RenderCount;
	uint treeLod1RenderBase;
	uint treeLod1RenderCount;
	uint treeTotalRenderBase;
	uint treeTotalRenderCount;
	float spacing;
	float spacingMult;
} treeVariables;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

//const int treeBase = 2048;
//const float spacing = 50;
//const float spacingMult = 0.02;

#include "variables.glsl"
#include "functions.glsl"
#include "heightmap.glsl"

float random(vec2 st)
{
    return fract(sin(dot(st.xy * 0.001, vec2(12.9898,78.233))) * 43758.5453123);
}

void main()
{
	uint index = gl_GlobalInvocationID.x * treeVariables.treeBase + gl_GlobalInvocationID.y;

	//float x = (float(gl_GlobalInvocationID.x) - float(treeBase) * 0.5) * spacing;
	//float z = (float(gl_GlobalInvocationID.y) - float(treeBase) * 0.5) * spacing;
	//float y = SampleDynamic(vec2(x, z));
	//vec3 worldPosition = vec3(x, y, z);

	float ran = random(gl_GlobalInvocationID.xy);

	float x = (ran - 0.5) * treeVariables.spacing * 0.75;
	ran = random(vec2(index, x));
	float z = (ran - 0.5) * treeVariables.spacing * 0.75;
	ran = random(vec2(x, z));
	float y = (ran - 0.5) * treeVariables.spacing * 0.2;

	vec3 position = vec3(x, y, z);
	//vec3 normal = SampleNormalDynamic(position.xz, 1.0);

	float scale = 1.0;
	float color = 1.0;
	ran = random(vec2(ran, index));
	float rotation = ran;
	//float life = 1.0;

	data[index].posxz = packHalf2x16(position.xz);
	data[index].posyroty = packHalf2x16(vec2(position.y, rotation));
	data[index].scaxcoly = packHalf2x16(vec2(scale, color));
}