#version 450

#extension GL_ARB_shading_language_include : require

#ifndef VIEW_COMPUTE
#define VIEW_COMPUTE
#endif

layout(set = 1, binding = 0, rgba16) uniform image2D viewTexture;
layout (set = 1, binding = 1) uniform sampler2D transmittanceSampler;
layout (set = 1, binding = 2) uniform sampler2D scatterSampler;

layout(std430, set = 0, binding = 7) buffer SunBuffer
{
	vec4 sunColor;
};

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

const vec2 resolution = vec2(192.0, 128.0);
const vec2 resolutionMult = 1.0 / resolution;

const vec2 scatterResolution = vec2(32, 32);

#include "variables.glsl"
#include "transformation.glsl"
#include "depth.glsl"
#include "lighting.glsl"
#include "atmosphere.glsl"

void main()
{
	vec2 index = gl_GlobalInvocationID.xy;
	vec2 uv = index * resolutionMult;
	
	//float viewHeight = 0.2 * 0.1;
	float viewHeight = (variables.viewPosition.y + variables.terrainOffset.y) * 0.001;
	vec3 rayStart = vec3(0.0, 0.0, PR + RADIUS_OFFSET + viewHeight);
	vec3 sunDirection = variables.rotatedLightDirection;
	//sunDirection = normalize(Rotate(sunDirection, radians(-90.0), vec3(1.0, 0.0, 0.0)));

	vec2 viewValues = ViewValues(uv, resolution, length(rayStart));

	float sunAngle = dot(normalize(rayStart), sunDirection);
	vec3 localSunDirection = normalize(vec3(sqrt(1.0 - sunAngle * sunAngle), 0.0, sunAngle));

	float viewAngle = sqrt(1.0 - viewValues.x * viewValues.x);
	vec3 rayDirection = vec3(cos(viewValues.y) * sin(viewValues.x), sin(viewValues.y) * sin(viewValues.x), cos(viewValues.x));

	if (!MoveToAtmosphereEdge(rayStart, rayDirection))
	{
		imageStore(viewTexture, ivec2(index), vec4(0.0, 0.0, 0.0, 1.0));
		return;
	}

	vec3 luminance = Luminance(rayStart, rayDirection, localSunDirection);
	imageStore(viewTexture, ivec2(index), vec4(luminance, 1.0));

	if (ivec2(index).x == 0 && ivec2(index).y == 62)
	{
		sunColor = vec4(mix(ToStandard(luminance) * 2.0, LIGHT_COLOR, clamp(sunDirection.z * 2.0, 0.0, 1.0)), 1.0);
	}
}