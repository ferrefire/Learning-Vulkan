#version 450

#extension GL_ARB_shading_language_include : require

layout(set = 1, binding = 0, rgba8) uniform image2D scatterTexture;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "variables.glsl"
#include "transformation.glsl"
#include "depth.glsl"
#include "lighting.glsl"
#include "atmosphere.glsl"

const uint resolution = 512;
const float resolutionMult = 0.001953125;

void main()
{
	vec2 index = gl_GlobalInvocationID.xy;
	vec2 uv = index * resolutionMult;

	float y = -2 * uv.x + 1;
	float x = sin(acos(y));
	vec3 rayDirection = vec3(x, y, 0);

	vec3 rayStart = vec3(0, PR + (uv.y * AH), 0);
	float rayLength = SphereIntersect(rayStart, rayDirection).y;
	vec3 rayEnd = rayStart + rayDirection * rayLength;

	vec3 transmittance = Transmittance(rayStart, rayEnd);

	imageStore(scatterTexture, ivec2(index), vec4(transmittance, 1.0));
}