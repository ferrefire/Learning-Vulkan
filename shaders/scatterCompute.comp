#version 450

#extension GL_ARB_shading_language_include : require

layout(set = 1, binding = 0, rgba16) uniform image2D scatterTexture;
layout (set = 1, binding = 1) uniform sampler2D transmittanceSampler;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 64) in;

#ifndef SCATTER_COMPUTE
#define SCATTER_COMPUTE
#endif

#ifndef PI
#define PI 3.1415926535897932384626433832795
#endif

const float goldenRatio = 1.6180339;
const float uniformPhase = 1.0 / (4.0 * PI);
const float sphereSamples = 64.0;

#include "variables.glsl"
#include "transformation.glsl"
#include "depth.glsl"
#include "lighting.glsl"
#include "atmosphere.glsl"

shared vec3 scatterResults[64];
shared vec3 luminanceResults[64];

const vec2 resolution = vec2(32, 32);
const vec2 resolutionMult = 1.0 / resolution;

void main()
{
	vec2 index = gl_GlobalInvocationID.xy;
	vec2 uv = (index + 0.5) * resolutionMult;
	vec2 scatterValues = vec2(ScatterValues(uv.x, resolution.x), ScatterValues(uv.y, resolution.y));

	float sunAngle = scatterValues.x * 2.0 - 1.0;
	vec3 sunDirection = vec3(0.0, sqrt(clamp(1.0 - sunAngle * sunAngle, 0.0, 1.0)), sunAngle);
	float height = PR + clamp(uv.y + RADIUS_OFFSET, 0.0, 1.0) * (AR - PR - RADIUS_OFFSET);

	vec3 rayStart = vec3(0.0, 0.0, height);

	float idx = gl_LocalInvocationID.z;
	float theta = acos(1.0 - 2.0 * (idx + 0.5) / 64.0);
	float phi = (2.0 * PI * idx) / goldenRatio;

	vec3 rayDirection = vec3(cos(theta) * sin(phi), sin(theta) * sin(phi), cos(phi));
	RaymarchResult result = MultiScatter(rayStart, rayDirection, sunDirection);

	scatterResults[gl_LocalInvocationID.z] = result.multiScattering / sphereSamples;
	luminanceResults[gl_LocalInvocationID.z] = result.luminance / sphereSamples;

	groupMemoryBarrier();
	barrier();

	if (gl_LocalInvocationID.z < 32)
	{
		scatterResults[gl_LocalInvocationID.z] += scatterResults[gl_LocalInvocationID.z + 32];
		luminanceResults[gl_LocalInvocationID.z] += luminanceResults[gl_LocalInvocationID.z + 32];
	}

	groupMemoryBarrier();
	barrier();

	if (gl_LocalInvocationID.z < 16)
	{
		scatterResults[gl_LocalInvocationID.z] += scatterResults[gl_LocalInvocationID.z + 16];
		luminanceResults[gl_LocalInvocationID.z] += luminanceResults[gl_LocalInvocationID.z + 16];
	}

	groupMemoryBarrier();
	barrier();

	if (gl_LocalInvocationID.z < 8)
	{
		scatterResults[gl_LocalInvocationID.z] += scatterResults[gl_LocalInvocationID.z + 8];
		luminanceResults[gl_LocalInvocationID.z] += luminanceResults[gl_LocalInvocationID.z + 8];
	}

	groupMemoryBarrier();
	barrier();

	if (gl_LocalInvocationID.z < 4)
	{
		scatterResults[gl_LocalInvocationID.z] += scatterResults[gl_LocalInvocationID.z + 4];
		luminanceResults[gl_LocalInvocationID.z] += luminanceResults[gl_LocalInvocationID.z + 4];
	}

	groupMemoryBarrier();
	barrier();

	if (gl_LocalInvocationID.z < 2)
	{
		scatterResults[gl_LocalInvocationID.z] += scatterResults[gl_LocalInvocationID.z + 2];
		luminanceResults[gl_LocalInvocationID.z] += luminanceResults[gl_LocalInvocationID.z + 2];
	}

	groupMemoryBarrier();
	barrier();

	if (gl_LocalInvocationID.z < 1)
	{
		scatterResults[gl_LocalInvocationID.z] += scatterResults[gl_LocalInvocationID.z + 1];
		luminanceResults[gl_LocalInvocationID.z] += luminanceResults[gl_LocalInvocationID.z + 1];
	}

	groupMemoryBarrier();
	barrier();

	if (gl_LocalInvocationID.z != 0)
		return;

	vec3 totalMultiScattering = scatterResults[0];
	vec3 totalLuminance = luminanceResults[0];

	vec3 r = totalMultiScattering;
	vec3 totalContribution = vec3(1.0 / (1.0 - r.x), 1.0 / (1.0 - r.y), 1.0 / (1.0 - r.z));
	vec3 luminance = totalLuminance * totalContribution;

	imageStore(scatterTexture, ivec2(index), vec4(luminance, 1.0));
}