#version 450

#extension GL_ARB_shading_language_include : require

layout(set = 1, binding = 0, r16) uniform image2D scatterTexture;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "variables.glsl"
#include "transformation.glsl"
#include "depth.glsl"
#include "lighting.glsl"
#include "atmosphere.glsl"

const uint resolution = 512;
const float resolutionMult = 0.001953125;

void main()
{
	vec2 index = gl_GlobalInvocationID.xy;
	vec2 uv = index * resolutionMult;

	//vec3 startPosition = vec3(0, (1.0 - uv.y) * (radius - surface), 0);
	vec3 startPosition = vec3(0, (1.0 - uv.y) * (radius - surface) - surfaceOffset, 0);

	//vec3 direction = Rotate(vec3(0, 0, 1), radians(((1.0 - uv.x) - 0.5) * 180.0), vec3(1, 0, 0));
	vec3 direction = Rotate(vec3(0, 0, 1), ((1.0 - uv.x) - 0.5), vec3(1, 0, 0));
	//direction = normalize(direction);

	float rayLength = AtmosphereIntersect(startPosition, direction).y;
	float currentOptical = GetOpticalDepth(startPosition, direction, rayLength) / rayLength;

	imageStore(scatterTexture, ivec2(index), vec4(currentOptical, 0, 0, 0));
}