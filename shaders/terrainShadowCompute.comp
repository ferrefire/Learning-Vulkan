#version 450

#extension GL_ARB_shading_language_include : require

layout(set = 1, binding = 0, r16) uniform image2D terrainShadowTexture;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

//const uint resolution = 1024;
//const float resolutionMult = 0.0009765625;
const uint resolution = 4096;
const float resolutionMult = 0.000244141;

const float shadowDistance = 25000.0;

const int iterations = 50;
const float iterationsMult = 1.0 / float(iterations);

#include "variables.glsl"
#include "heightmap.glsl"

void main()
{
  	vec2 index = gl_GlobalInvocationID.xy;
	vec2 uv = index * resolutionMult - 0.5;
	vec2 worldPosition = variables.viewPosition.xz + uv * shadowDistance;
	float height = SampleDynamic(worldPosition);
	float result = 1;
	int i = 0;
	float inter = 0;
	vec3 lightPosition = variables.lightDirection * 50000.0;
	//lightPosition.xz += variables.viewPosition.xz;
	vec3 samplePosition = vec3(worldPosition.x, height * 5000.0, worldPosition.y);
	vec3 rayPosition = lightPosition;
	float rayHeight;

	while (i < iterations)
	{
		//rayPosition = mix(lightPosition, samplePosition, inter);
		rayPosition = mix(rayPosition, samplePosition, 0.1);
		rayHeight = SampleDynamic(rayPosition.xz) * 5000.0;
		if (rayHeight >= rayPosition.y)
		{
			result = 0;
			break;
		}
		inter = i * iterationsMult;
		i++;
	}

  	imageStore(terrainShadowTexture, ivec2(index), vec4(result, 0, 0, 0));
}
