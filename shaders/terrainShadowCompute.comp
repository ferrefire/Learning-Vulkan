#version 450

#extension GL_ARB_shading_language_include : require

#ifndef TERRAIN_CASCADE_COUNT
#define TERRAIN_CASCADE_COUNT 1
#endif

layout(set = 1, binding = 0, r16) uniform image2D terrainShadowTextures[TERRAIN_CASCADE_COUNT];

layout(set = 1, binding = 1) uniform ShadowComputeVariables
{
	float shadowDistance;
	int shadowResolution;
	float shadowResolutionMultiplier;
	float shadowSpacing;
	int lod;
} shadowComputeVariables;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

const uint resolution = 1024;
const float resolutionMult = 0.0009765625;
//const uint resolution = 2048;
//const float resolutionMult = 0.000488281;
//const uint resolution = 4096;
//const float resolutionMult = 0.000244141;

//const float shadowDistance = 25000.0;
const float shadowDistance = 8192.0;

const int iterations = 100;
const float iterationsMult = 1.0 / float(iterations);

const int softSampleDistance = 2;
const int softSampleDistanceLength = softSampleDistance * 2 + 1;
const float softnessMult = 1.0 / (softSampleDistanceLength * softSampleDistanceLength);
const float softDistance = 16.0;
const float minSoftDistance = softDistance * softSampleDistanceLength;

#include "variables.glsl"
#include "heightmap.glsl"

float SoftShadows(vec2 position, float height, float terrainHeight)
{
	float softness = 1.0 - softnessMult;

	for (int x = -softSampleDistance; x <= softSampleDistance; x++)
	{
		for (int y = -softSampleDistance; y <= softSampleDistance; y++)
		{
			if (x == 0 && y == 0) continue;
			if (SampleDynamic(position + vec2(x * softDistance, y * softDistance)) * terrainHeight >= height) softness -= softnessMult;
		}
	}

	return (softness);

	//result -= 0.2;
	//if (SampleDynamic(rayPosition.xz + vec2(5, 5)) * variables.terrainHeight >= rayPosition.y) result -= 0.2;
	//if (SampleDynamic(rayPosition.xz + vec2(-5, 5)) * variables.terrainHeight >= rayPosition.y) result -= 0.2;
	//if (SampleDynamic(rayPosition.xz + vec2(5, -5)) * variables.terrainHeight >= rayPosition.y) result -= 0.2;
	//if (SampleDynamic(rayPosition.xz + vec2(-5, -5)) * variables.terrainHeight >= rayPosition.y) result -= 0.2;
}

void main()
{
  	vec2 index = gl_GlobalInvocationID.xy;
	//int lod = shadowComputeVariables.index;
	vec2 uv = index * shadowComputeVariables.shadowResolutionMultiplier - 0.5;

	//float shadowSpacing = shadowComputeVariables.shadowResolutionMultiplier * shadowComputeVariables.shadowDistance;
	vec2 flooredViewPosition = floor(variables.viewPosition.xz / shadowComputeVariables.shadowSpacing);
    float u = (flooredViewPosition.x) * shadowComputeVariables.shadowSpacing;
    float v = (flooredViewPosition.y) * shadowComputeVariables.shadowSpacing;

	vec2 worldPosition = vec2(u, v) + uv * shadowComputeVariables.shadowDistance;
	float height = SampleDynamic(worldPosition);
	float result = 1;
	int i = 0;
	float inter = 0;
	//vec3 lightPosition = variables.lightDirection * shadowComputeVariables.shadowDistance;
	vec3 lightPosition = variables.lightDirection * 25000.0;
	//vec3 lightPosition = variables.lightDirection * 12500.0;
	//lightPosition.xz += worldPosition;
	vec3 samplePosition = vec3(worldPosition.x, height * variables.terrainHeight, worldPosition.y);
	if (samplePosition.y < variables.waterHeight.x) samplePosition.y = variables.waterHeight.x;
	lightPosition += samplePosition;
	vec3 rayPosition = lightPosition;
	float rayHeight;
	float terrainHeight = variables.terrainHeight;

	while (i < iterations)
	{
		//rayPosition = mix(lightPosition, samplePosition, inter);
		//rayPosition = mix(rayPosition, samplePosition, 0.05);
		float mixStrength = inter;
		//if (shadowComputeVariables.lod == 0) mixStrength = 1.0 - pow(1.0 - inter, 1.5);
		rayPosition = mix(lightPosition, samplePosition, mixStrength);
		rayHeight = SampleDynamic(rayPosition.xz) * terrainHeight;
		if (rayHeight >= rayPosition.y)
		{
			//if (shadowComputeVariables.lod == 0) result = SoftShadows(rayPosition.xz, rayPosition.y, terrainHeight);
			result = 0;
			break;
		}
		inter = i * iterationsMult;
		i++;
	}

  	imageStore(terrainShadowTextures[shadowComputeVariables.lod], ivec2(index), vec4(result, 0, 0, 0));
}
